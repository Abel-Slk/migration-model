using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class State //класс, определяющий страну как объект, обладающий различными характеристиками
    {
 

        //авт св-ва:
        public double population { set; get; }  //общая численность населения в данной стране - функция от массива структуры населения

        public double[] populationByCult = new double[numberOfCountries];
        public double education { set; get; }   //уровень технического образования в стране (кол-во людей с технич образованием)
        //лучше переименовать в sumOfEducated для ясности, и в educCount() туда сразу напрямую все записывать без врем перем
        public double shareOfEducated { set; get; } //доля людей с высшим техническим образованием в стране

        //public double production { get; set; }  //уровень производственных мощностей в стране - ф-ия от кол-ва образованных людей в стране. (И еще мб от числа мигрантов?)
        //public double consumption { get; set; } //уровень потребления в стране - ф-ия от численности населения и от уровня производ мощн
        public double standardOfLiving { get; set; }    //уровень жизни в стране. Зависит от количества образованных людей и от уровня социальной нестабильности. Является обобщением экономических параметров. Считаем, что чем больше в стране образованных людей (имеющих техническое образование), тем экономика и уровень жизни лучше, поэтому в данной модели уровень жизни будет зависеть от технического образования.


        public double shareOfMigrants { get; set; } //доля мигрантов в населении страны - ф-ия от числ населения
        //public double toleranceOfMigrants { get; set; } //уровень терпимости к мигрантам в данной стране


        //public double socialConditions_standardOfLiving { set; get; } //характеристика уровня недовольства уровнем жизни в стране, явл-ся ф-ией от уровня жизни
        //public double socialConditionsConsum { set; get; } //характеристика уровня недовольства в стране, явл-ся ф-ией от consumption 
        //public double socialConditionsMig { set; get; } //характеристика уровня недовольства в стране, явл-ся ф-ией от кол-ва мигрантов в стране
        //public double socialConditions { set; get; } // общая характеристика уровня недовольства в стране, явл-ся ф-ией от socialConditionsConsum и socialConditionsMig

        public double socInstabilityIndex { set; get; }  //уровень социальной нестабильности. Зависит от матрицы толерантности в данной стране. Влияет на уровень жизни и на желание находится в данной стране.



        //св-ва, связанные с графом:    
        public static int numberOfCountries = 5;    //количество стран
                                                    //(должен быть static, чтобы его можно было использовать для задания размерностей массивов. Из-за static доступ к этому полю класса в програме будет не через объект класса, а через класс (те State.numberOfCountries, а не st.numberOfCountries, где st - объект).)

        public double[] desireToBeIn = new double[numberOfCountries];   // желание находиться в стране. Для каждой страны будет вектором из 5 элементов. (Если смотреть на все страны вместе, то это матрица 5*5.) Один элемент каждого вектора (соответствующий номеру страны) характеризует желание остаться в своей стране, остальные элементы - желания уехать в другие страны. 
                                                                        //Как вычисляется (можно еще подумать над формулами):
                                                                        //а) желание быть в СВОЕЙ стране равно линейно зависит от уровня жизни в своей стране.
                                                                        //б) желание уехать из А в В равно преимуществу условий жизни в стране В по сравн со страной А - те разности показателей уровня жизни в В и в А. Если в результате положит знач, то эта величина характеризует желание уехать в В; если отриц, то на такую величину есть желание не ехать в В
     
        public double[] flowCapacity = new double[numberOfCountries];  // пропускная способность потока. Определяется политикой страны относительно мигрантов из каждой из остальных стран. характеризует желание/возможность страны А принимать мигрантов из В. (В дальнейшем мб сделать это управляющим параметром, регулирующимся игроком?)    
                                                                      //Будем считать, что пропускная способность из страны s в страну d за 1 такт определяется как одна тысячная часть населения d (т.е. местного). (Можно еще подумать насчет формулы)   
                                                                      
        public double[] flowSize = new double[numberOfCountries];   // размер потока - сколько людей переезжает за данный такт из страны А в страну В
                                                                    //Как вычисляется:
                                                                    //а) Сначала вычисляется потенциальный размер потока из А в В как произведение числ насел а А на коэф-т желания в стране А ехать в страну В. 
                                                                    //б) Реальный размер потока будет равен потенциальному, если тот не превысит пропускной способности из А в В, в противном случае поток будет равен пропускной способности.


        public double eduTechResource; // в дальнейшем сделать возможность изменения игроком этих значений по умолчанию через интерфейс (поле или ползунок)
        public double eduCultResource;

        //демографические параметры:
        public double bCoeff_activePeople;  //коэф рождаемости возраста1. Считаем, что только трудоспособное население дает потомство, поэтому детей и стариков здесь не учитываем       
        public double dCoeff_activePeople;  //коэф смертности возраста1 - процент, на который понижается численность трудоспос населения страны на каждом такте.
        public double dCoeff_elders;    //коэф смертности возраста2 - процент, на который понижается численность стариков на каждом такте.



        //constr
        public State()//State(double popul, double educ)   //конструктор можно оставить без параметров и пустым, тк все значения свойств вычисляются в отдельных функциях
        {            
            //population = popul;
            //education = educ;
        }

        //цепочка конструкторов (для автоматического задания значений свойств по умолчанию при создании нового объекта; нам здесь не нужно, тк все значения св-в вычисляются в отдельных функциях)
        //public State() : this(120, 100, 100, 100) { }
    }
}
